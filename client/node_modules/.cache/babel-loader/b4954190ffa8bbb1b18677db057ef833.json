{"ast":null,"code":"import _slicedToArray from \"/home/gennadii/Elbrus/Training-Day/t-day/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gennadii/Elbrus/Training-Day/t-day/src/components/ExerciseContainer.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport StratAndPauseButton from './StratAndPauseButton/StratAndPauseButton';\nimport Timer from './Timer/Timer';\nimport { heatupAC } from \"../redux/actions/actions\";\nimport { connect } from \"react-redux\";\nimport Heatup from './Heatup/Heatup';\nimport Header from './Header/Header';\n\nconst mapStateToProps = state => ({\n  state\n});\n\nfunction StartAndPauseContainer(props) {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        show = _useState2[0],\n        setShow = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        startTimer = _useState4[0],\n        setStartTimer = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        nextExercise = _useState6[0],\n        setNextExercise = _useState6[1];\n\n  const _useState7 = useState({\n    seconds: 10,\n    exercise: 0,\n    status: 'stopped'\n  }),\n        _useState8 = _slicedToArray(_useState7, 2),\n        time = _useState8[0],\n        setTime = _useState8[1];\n\n  useEffect(() => {\n    props.setAppState(props.state.training.status);\n\n    if (time.status === 'finished') {\n      console.log('=======');\n      setNextExercise(nextExercise + 1);\n      timeHandler();\n    }\n  }, [time]);\n\n  function timeHandler() {\n    if (time === 'finished') {\n      setTime(10);\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Header, {\n    state: props.state.training.status,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), show && React.createElement(Heatup, {\n    next: nextExercise,\n    setHeatup: props.heatup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), startTimer && React.createElement(Timer, {\n    time: time,\n    setTime: setTime,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(StratAndPauseButton, {\n    setStartTimer: setStartTimer,\n    setShow: setShow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }));\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    heatup: exercise => {\n      dispatch(heatupAC(exercise));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartAndPauseContainer);","map":{"version":3,"sources":["/home/gennadii/Elbrus/Training-Day/t-day/src/components/ExerciseContainer.jsx"],"names":["React","useState","useEffect","StratAndPauseButton","Timer","heatupAC","connect","Heatup","Header","mapStateToProps","state","StartAndPauseContainer","props","show","setShow","startTimer","setStartTimer","nextExercise","setNextExercise","seconds","exercise","status","time","setTime","setAppState","training","console","log","timeHandler","heatup","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,mBAAP,MAAgC,2CAAhC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAChCA,EAAAA;AADgC,CAAZ,CAAxB;;AAIA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAAA,oBACXX,QAAQ,CAAC,IAAD,CADG;AAAA;AAAA,QAC5BY,IAD4B;AAAA,QACtBC,OADsB;;AAAA,qBAECb,QAAQ,CAAC,IAAD,CAFT;AAAA;AAAA,QAE5Bc,UAF4B;AAAA,QAEhBC,aAFgB;;AAAA,qBAGKf,QAAQ,CAAC,CAAD,CAHb;AAAA;AAAA,QAG5BgB,YAH4B;AAAA,QAGdC,eAHc;;AAAA,qBAIXjB,QAAQ,CAAC;AAACkB,IAAAA,OAAO,EAAG,EAAX;AAAeC,IAAAA,QAAQ,EAAG,CAA1B;AAA6BC,IAAAA,MAAM,EAAG;AAAtC,GAAD,CAJG;AAAA;AAAA,QAI5BC,IAJ4B;AAAA,QAItBC,OAJsB;;AAMnCrB,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,KAAK,CAACY,WAAN,CAAkBZ,KAAK,CAACF,KAAN,CAAYe,QAAZ,CAAqBJ,MAAvC;;AACA,QAAIC,IAAI,CAACD,MAAL,KAAgB,UAApB,EAAgC;AAC5BK,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAT,MAAAA,eAAe,CAACD,YAAY,GAAG,CAAhB,CAAf;AACAW,MAAAA,WAAW;AACd;AACJ,GAPQ,EAOP,CAACN,IAAD,CAPO,CAAT;;AASA,WAASM,WAAT,GAAwB;AACpB,QAAIN,IAAI,KAAK,UAAb,EAAyB;AACrBC,MAAAA,OAAO,CAAC,EAAD,CAAP;AACH;AACJ;;AAED,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEX,KAAK,CAACF,KAAN,CAAYe,QAAZ,CAAqBJ,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKR,IAAI,IAAI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAII,YAAhB;AAA8B,IAAA,SAAS,EAAIL,KAAK,CAACiB,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFb,EAGKd,UAAU,IAAI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAIO,IAAf;AAAqB,IAAA,OAAO,EAAIC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHnB,EAII,oBAAC,mBAAD;AAAqB,IAAA,aAAa,EAAEP,aAApC;AAAmD,IAAA,OAAO,EAAEF,OAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH;;AAED,MAAMgB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHF,IAAAA,MAAM,EAAGT,QAAD,IAAc;AAAEW,MAAAA,QAAQ,CAAC1B,QAAQ,CAACe,QAAD,CAAT,CAAR;AAA8B;AADnD,GAAP;AAGH,CAJD;;AAMA,eAAed,OAAO,CAClBG,eADkB,EAElBqB,kBAFkB,CAAP,CAGbnB,sBAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport StratAndPauseButton from './StratAndPauseButton/StratAndPauseButton'\nimport Timer from './Timer/Timer'\nimport { heatupAC } from \"../redux/actions/actions\";\nimport { connect } from \"react-redux\";\nimport Heatup from './Heatup/Heatup'\nimport Header from './Header/Header'\n\nconst mapStateToProps = (state) => ({\n    state\n});\n\nfunction StartAndPauseContainer(props) {\n    const [show, setShow] = useState(null)\n    const [startTimer, setStartTimer] = useState(null)\n    const [nextExercise, setNextExercise] = useState(0)\n    const [time, setTime] = useState({seconds : 10, exercise : 0, status : 'stopped'})\n\n    useEffect(() => {\n        props.setAppState(props.state.training.status)\n        if (time.status === 'finished') {\n            console.log('=======')\n            setNextExercise(nextExercise + 1)\n            timeHandler ()\n        }    \n    },[time]);\n\n    function timeHandler () {\n        if (time === 'finished') {\n            setTime(10)\n        }    \n    }\n    \n    return (\n        <div>\n            <Header state={props.state.training.status} />  \n            {show && <Heatup next = {nextExercise} setHeatup = {props.heatup}/>}\n            {startTimer && <Timer time = {time} setTime = {setTime}/>}\n            <StratAndPauseButton setStartTimer={setStartTimer} setShow={setShow} />\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        heatup: (exercise) => { dispatch(heatupAC(exercise)) }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(StartAndPauseContainer);\n"]},"metadata":{},"sourceType":"module"}