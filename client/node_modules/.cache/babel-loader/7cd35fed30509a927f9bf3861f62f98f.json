{"ast":null,"code":"import _slicedToArray from \"/home/gennadii/Elbrus/Training-Day/t-day/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gennadii/Elbrus/Training-Day/t-day/client/src/components/ExerciseContainer/ExerciseContainer.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { heatupAC, startTimerAC, setExerciseQuantityAC, decrExerciseQuantityAC } from \"../../redux/actions/actions\";\nimport { connect } from \"react-redux\";\nimport './ExerciseContainer.css';\nimport Timer from '../Timer/Timer';\nimport Exercise from '../Exrcise/Exercise';\nimport Neck from '../HeatUpImg/neck.jpg';\nimport Hands from '../HeatUpImg/hands.jpg';\nimport Test from '../HeatUpImg/ZIyE.gif';\n\nconst mapStateToProps = state => ({\n  state\n});\n\nfunction StartAndPauseContainer(props) {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        exerciseNumber = _useState2[0],\n        setExerciseNumber = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        timerFinish = _useState4[0],\n        setTimerFinish = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showExerciseAndTimer = _useState6[0],\n        setShowExerciseAndTimer = _useState6[1]; //duration in ms, 100ms = 10sec\n  //let heatupArray = [{ name: 'Xpenb', img: Test, duration: 10 }, { name: 'Hands', img: Hands, duration: 15 },{ name: 'Neck', img: Neck, duration: 20 }]\n\n\n  let heatupArray = props.heatupExercises; //отправляем в Редакс Стор наш активити (Разминка или Тренировка)\n\n  useEffect(() => {\n    props.setActivity(heatupArray[exerciseNumber].name);\n  }, [exerciseNumber]);\n  useEffect(() => {\n    if (timerFinish) {\n      nextExercise(heatupArray);\n    }\n  }, [timerFinish]);\n\n  async function nextExercise(arrayWithExercises) {\n    if (timerFinish) {\n      if (exerciseNumber < arrayWithExercises.length - 1) {\n        await setExerciseNumber(exerciseNumber + 1);\n        setTimerFinish(false);\n      } else {\n        props.heatup('finished');\n        setShowExerciseAndTimer(false);\n        return false;\n      }\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"imgContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, showExerciseAndTimer && React.createElement(Exercise, {\n    exercise: heatupArray[exerciseNumber],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), showExerciseAndTimer && React.createElement(Timer, {\n    setTimerFinish: setTimerFinish,\n    duration: heatupArray[exerciseNumber].duration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartAndPauseContainer);","map":{"version":3,"sources":["/home/gennadii/Elbrus/Training-Day/t-day/client/src/components/ExerciseContainer/ExerciseContainer.jsx"],"names":["React","useState","useEffect","heatupAC","startTimerAC","setExerciseQuantityAC","decrExerciseQuantityAC","connect","Timer","Exercise","Neck","Hands","Test","mapStateToProps","state","StartAndPauseContainer","props","exerciseNumber","setExerciseNumber","timerFinish","setTimerFinish","showExerciseAndTimer","setShowExerciseAndTimer","heatupArray","heatupExercises","setActivity","name","nextExercise","arrayWithExercises","length","heatup","duration","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,qBAAjC,EAAwDC,sBAAxD,QAAsF,6BAAtF;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,yBAAP;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;;AAGA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAChCA,EAAAA;AADgC,CAAZ,CAAxB;;AAIA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAAA,oBAESf,QAAQ,CAAC,CAAD,CAFjB;AAAA;AAAA,QAE5BgB,cAF4B;AAAA,QAEZC,iBAFY;;AAAA,qBAGGjB,QAAQ,CAAC,KAAD,CAHX;AAAA;AAAA,QAG5BkB,WAH4B;AAAA,QAGfC,cAHe;;AAAA,qBAIqBnB,QAAQ,CAAC,IAAD,CAJ7B;AAAA;AAAA,QAI5BoB,oBAJ4B;AAAA,QAINC,uBAJM,kBAKnC;AACA;;;AACA,MAAIC,WAAW,GAAGP,KAAK,CAACQ,eAAxB,CAPmC,CAQnC;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,KAAK,CAACS,WAAN,CAAkBF,WAAW,CAACN,cAAD,CAAX,CAA4BS,IAA9C;AACH,GAFQ,EAEN,CAACT,cAAD,CAFM,CAAT;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiB,WAAJ,EAAiB;AACbQ,MAAAA,YAAY,CAACJ,WAAD,CAAZ;AACH;AACJ,GAJQ,EAIN,CAACJ,WAAD,CAJM,CAAT;;AAMA,iBAAeQ,YAAf,CAA4BC,kBAA5B,EAAgD;AAC5C,QAAIT,WAAJ,EAAiB;AACb,UAAIF,cAAc,GAAGW,kBAAkB,CAACC,MAAnB,GAA4B,CAAjD,EAAoD;AAChD,cAAMX,iBAAiB,CAACD,cAAc,GAAG,CAAlB,CAAvB;AACAG,QAAAA,cAAc,CAAC,KAAD,CAAd;AACH,OAHD,MAGO;AACHJ,QAAAA,KAAK,CAACc,MAAN,CAAa,UAAb;AACAR,QAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACA,eAAO,KAAP;AACH;AACJ;AACJ;;AAED,SACI,0CACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,oBAAoB,IAAI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEE,WAAW,CAACN,cAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD7B,CADJ,EAIKI,oBAAoB,IAAI,oBAAC,KAAD;AAAO,IAAA,cAAc,EAAED,cAAvB;AAAuC,IAAA,QAAQ,EAAEG,WAAW,CAACN,cAAD,CAAX,CAA4Bc,QAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJ7B,CADJ;AAQH;;AAED,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO,EAAP;AAEH,CAHD;;AAKA,eAAe1B,OAAO,CAClBM,eADkB,EAElBmB,kBAFkB,CAAP,CAGbjB,sBAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { heatupAC, startTimerAC, setExerciseQuantityAC, decrExerciseQuantityAC } from \"../../redux/actions/actions\";\nimport { connect } from \"react-redux\";\nimport './ExerciseContainer.css'\n\nimport Timer from '../Timer/Timer';\nimport Exercise from '../Exrcise/Exercise'\nimport Neck from '../HeatUpImg/neck.jpg'\nimport Hands from '../HeatUpImg/hands.jpg'\nimport Test from '../HeatUpImg/ZIyE.gif'\n\n\nconst mapStateToProps = (state) => ({\n    state\n});\n\nfunction StartAndPauseContainer(props) {\n\n    const [exerciseNumber, setExerciseNumber] = useState(0)\n    const [timerFinish, setTimerFinish] = useState(false)\n    const [showExerciseAndTimer, setShowExerciseAndTimer] = useState(true)\n    //duration in ms, 100ms = 10sec\n    //let heatupArray = [{ name: 'Xpenb', img: Test, duration: 10 }, { name: 'Hands', img: Hands, duration: 15 },{ name: 'Neck', img: Neck, duration: 20 }]\n    let heatupArray = props.heatupExercises;\n    //отправляем в Редакс Стор наш активити (Разминка или Тренировка)\n    useEffect(() => {\n        props.setActivity(heatupArray[exerciseNumber].name)\n    }, [exerciseNumber])\n\n    useEffect(() => {\n        if (timerFinish) {\n            nextExercise(heatupArray)\n        }\n    }, [timerFinish])\n\n    async function nextExercise(arrayWithExercises) {\n        if (timerFinish) {\n            if (exerciseNumber < arrayWithExercises.length - 1) {\n                await setExerciseNumber(exerciseNumber + 1)\n                setTimerFinish(false)\n            } else {\n                props.heatup('finished')\n                setShowExerciseAndTimer(false)\n                return false\n            }\n        }\n    }\n\n    return (\n        <>\n            <div className='imgContainer'>\n                {showExerciseAndTimer && <Exercise exercise={heatupArray[exerciseNumber]} />}\n            </div>\n            {showExerciseAndTimer && <Timer setTimerFinish={setTimerFinish} duration={heatupArray[exerciseNumber].duration} />}\n        </>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(StartAndPauseContainer);\n"]},"metadata":{},"sourceType":"module"}