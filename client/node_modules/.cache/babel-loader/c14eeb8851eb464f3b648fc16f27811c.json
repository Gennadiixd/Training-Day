{"ast":null,"code":"var _jsxFileName = \"/home/gennadii/Elbrus/Training-Day/t-day/src/components/Heatup/Heatup.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport './Heatup.css';\nimport { heatupAC, startTimerAC, setExerciseQuantityAC, decrExerciseQuantityAC } from \"../../redux/actions/actions\";\nimport Exercise from '../Exrcise/Exercise';\nimport Neck from './neck.jpg';\nimport Hands from './hands.jpg';\nimport Timer from '../Timer/Timer';\n\nfunction Heatup(props) {\n  // const [needChange, setNeedChange] = useState(false)\n  // const [progressState, setprogressState] = useState(100)\n  //let exerciseArray = [{ name: 'Neck', img: Neck }, { name: 'Hands', img: Hands }, { name: 'Neck', img: Neck }]    \n  // useEffect(() => {\n  //     props.setExerciseQuantity(exerciseArray.length-1)\n  // }, [exerciseArray.length])\n  // useEffect(() => {\n  //     if (props.exerciseNumber >= 0) {\n  //         props.setHeatupExercise(exerciseArray[props.exerciseNumber].name)\n  //     }          \n  // }, [props.exerciseNumber])\n  useEffect(() => {\n    if (needChange && props.exerciseNumber > 0) {\n      props.decrExerciseQuantity();\n      setprogressState(100);\n      setNeedChange(false);\n    } else {// finish\n    }\n  }, [needChange]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"imgContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, exerciseArray[props.exerciseNumber] && React.createElement(Exercise, {\n    exercise: exerciseArray[props.exerciseNumber],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(Timer, {\n    setNeedChange: setNeedChange,\n    setprogressState: setprogressState,\n    progressState: progressState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    heatup: exercise => {\n      dispatch(heatupAC(exercise));\n    },\n    startTimer: seconds => {\n      dispatch(startTimerAC(seconds));\n    },\n    setExerciseQuantity: quntity => {\n      dispatch(setExerciseQuantityAC(quntity));\n    },\n    decrExerciseQuantity: () => {\n      dispatch(decrExerciseQuantityAC());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Heatup);","map":{"version":3,"sources":["/home/gennadii/Elbrus/Training-Day/t-day/src/components/Heatup/Heatup.jsx"],"names":["React","useState","useEffect","connect","heatupAC","startTimerAC","setExerciseQuantityAC","decrExerciseQuantityAC","Exercise","Neck","Hands","Timer","Heatup","props","needChange","exerciseNumber","decrExerciseQuantity","setprogressState","setNeedChange","exerciseArray","progressState","mapDispatchToProps","dispatch","heatup","exercise","startTimer","seconds","setExerciseQuantity","quntity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,cAAP;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,qBAAjC,EAAwDC,sBAAxD,QAAsF,6BAAtF;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACnB;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,UAAU,IAAID,KAAK,CAACE,cAAN,GAAuB,CAAzC,EAA4C;AACxCF,MAAAA,KAAK,CAACG,oBAAN;AACAC,MAAAA,gBAAgB,CAAC,GAAD,CAAhB;AACAC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAJD,MAIS,CACL;AACH;AACJ,GARQ,EAQP,CAACJ,UAAD,CARO,CAAT;AAUA,SACI,0CACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKK,aAAa,CAACN,KAAK,CAACE,cAAP,CAAb,IAAuC,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEI,aAAa,CAACN,KAAK,CAACE,cAAP,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD5C,CADJ,EAII,oBAAC,KAAD;AAAQ,IAAA,aAAa,EAAEG,aAAvB;AAAsC,IAAA,gBAAgB,EAAED,gBAAxD;AAA0E,IAAA,aAAa,EAAEG,aAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH;;AAED,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHC,IAAAA,MAAM,EAAGC,QAAD,IAAc;AAAEF,MAAAA,QAAQ,CAAClB,QAAQ,CAACoB,QAAD,CAAT,CAAR;AAA8B,KADnD;AAEHC,IAAAA,UAAU,EAAGC,OAAD,IAAa;AAAEJ,MAAAA,QAAQ,CAACjB,YAAY,CAACqB,OAAD,CAAb,CAAR;AAAiC,KAFzD;AAGHC,IAAAA,mBAAmB,EAAGC,OAAD,IAAa;AAAEN,MAAAA,QAAQ,CAAChB,qBAAqB,CAACsB,OAAD,CAAtB,CAAR;AAA0C,KAH3E;AAIHZ,IAAAA,oBAAoB,EAAE,MAAM;AAACM,MAAAA,QAAQ,CAACf,sBAAsB,EAAvB,CAAR;AAAmC;AAJ7D,GAAP;AAMH,CAPD;;AASA,eAAeJ,OAAO,CAClB,IADkB,EAElBkB,kBAFkB,CAAP,CAGbT,MAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport './Heatup.css'\nimport { heatupAC, startTimerAC, setExerciseQuantityAC, decrExerciseQuantityAC } from \"../../redux/actions/actions\";\n\nimport Exercise from '../Exrcise/Exercise'\nimport Neck from './neck.jpg';\nimport Hands from './hands.jpg';\nimport Timer from '../Timer/Timer'\n\nfunction Heatup(props) {\n    // const [needChange, setNeedChange] = useState(false)\n    // const [progressState, setprogressState] = useState(100)\n\n    //let exerciseArray = [{ name: 'Neck', img: Neck }, { name: 'Hands', img: Hands }, { name: 'Neck', img: Neck }]    \n\n    // useEffect(() => {\n    //     props.setExerciseQuantity(exerciseArray.length-1)\n    // }, [exerciseArray.length])\n\n    // useEffect(() => {\n    //     if (props.exerciseNumber >= 0) {\n    //         props.setHeatupExercise(exerciseArray[props.exerciseNumber].name)\n    //     }          \n    // }, [props.exerciseNumber])\n\n    useEffect(() => {\n        if (needChange && props.exerciseNumber > 0) {\n            props.decrExerciseQuantity()             \n            setprogressState(100)\n            setNeedChange(false)            \n        }   else {\n            // finish\n        }   \n    },[needChange])\n    \n    return (\n        <>            \n            <div className=\"imgContainer\">\n                {exerciseArray[props.exerciseNumber] && <Exercise exercise={exerciseArray[props.exerciseNumber]} />}                \n            </div>\n            <Timer  setNeedChange={setNeedChange} setprogressState={setprogressState} progressState={progressState}/>\n        </>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        heatup: (exercise) => { dispatch(heatupAC(exercise)) },\n        startTimer: (seconds) => { dispatch(startTimerAC(seconds)) },\n        setExerciseQuantity: (quntity) => { dispatch(setExerciseQuantityAC(quntity)) },\n        decrExerciseQuantity: () => {dispatch(decrExerciseQuantityAC())}\n    }\n}\n\nexport default connect(\n    null,\n    mapDispatchToProps,\n)(Heatup);\n"]},"metadata":{},"sourceType":"module"}