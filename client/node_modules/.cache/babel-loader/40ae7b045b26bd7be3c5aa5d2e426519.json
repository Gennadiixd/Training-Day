{"ast":null,"code":"import _slicedToArray from \"/home/gennadii/Elbrus/Training-Day/t-day/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gennadii/Elbrus/Training-Day/t-day/src/components/ExerciseContainer/ExerciseContainer.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { heatupAC, startTimerAC, setExerciseQuantityAC, decrExerciseQuantityAC } from \"../../redux/actions/actions\";\nimport { connect } from \"react-redux\";\nimport './ExerciseContainer.css';\nimport Timer from '../Timer/Timer';\nimport Exercise from '../Exrcise/Exercise';\nimport Neck from '../HeatUpImg/neck.jpg';\nimport Hands from '../HeatUpImg/hands.jpg';\nimport Test from '../HeatUpImg/ZIyE.gif';\n\nconst mapStateToProps = state => ({\n  state\n});\n\nfunction StartAndPauseContainer(props) {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        exerciseNumber = _useState2[0],\n        setExerciseNumber = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        timerFinish = _useState4[0],\n        setTimerFinish = _useState4[1];\n\n  const _useState5 = useState('false'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        test = _useState6[0],\n        setTest = _useState6[1]; //duration in ms, 100ms = 10sec\n\n\n  let heatupArray = [{\n    name: 'Xpenb',\n    img: Test,\n    duration: 10\n  }, {\n    name: 'Hands',\n    img: Hands,\n    duration: 150\n  }];\n  useEffect(() => {\n    props.heatup(heatupArray[exerciseNumber].name);\n  }, [exerciseNumber]);\n  useEffect(() => {\n    if (timerFinish) {\n      nextExercise(heatupArray);\n    }\n  }, [timerFinish]);\n\n  async function nextExercise(arrayWithExercises) {\n    if (timerFinish) {\n      if (exerciseNumber < arrayWithExercises.length) {\n        setExerciseNumber(exerciseNumber + 1);\n        setTimerFinish(false);\n        console.log(timerFinish);\n      } else {\n        console.log('false');\n        return false;\n      }\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"imgContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Exercise, {\n    exercise: heatupArray[exerciseNumber],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(Timer, {\n    setTimerFinish: setTimerFinish,\n    duration: heatupArray[exerciseNumber].duration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }));\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    heatup: exercise => {\n      dispatch(heatupAC(exercise));\n    },\n    startTimer: seconds => {\n      dispatch(startTimerAC(seconds));\n    },\n    setExerciseQuantity: quntity => {\n      dispatch(setExerciseQuantityAC(quntity));\n    },\n    decrExerciseQuantity: () => {\n      dispatch(decrExerciseQuantityAC());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartAndPauseContainer);","map":{"version":3,"sources":["/home/gennadii/Elbrus/Training-Day/t-day/src/components/ExerciseContainer/ExerciseContainer.jsx"],"names":["React","useState","useEffect","heatupAC","startTimerAC","setExerciseQuantityAC","decrExerciseQuantityAC","connect","Timer","Exercise","Neck","Hands","Test","mapStateToProps","state","StartAndPauseContainer","props","exerciseNumber","setExerciseNumber","timerFinish","setTimerFinish","test","setTest","heatupArray","name","img","duration","heatup","nextExercise","arrayWithExercises","length","console","log","mapDispatchToProps","dispatch","exercise","startTimer","seconds","setExerciseQuantity","quntity","decrExerciseQuantity"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { heatupAC, startTimerAC, setExerciseQuantityAC, decrExerciseQuantityAC } from \"../../redux/actions/actions\";\nimport { connect } from \"react-redux\";\nimport './ExerciseContainer.css'\n\nimport Timer from '../Timer/Timer';\nimport Exercise from '../Exrcise/Exercise'\nimport Neck from '../HeatUpImg/neck.jpg'\nimport Hands from '../HeatUpImg/hands.jpg'\nimport Test from '../HeatUpImg/ZIyE.gif'\n\n\nconst mapStateToProps = (state) => ({\n    state\n});\n\nfunction StartAndPauseContainer(props) {\n    const [exerciseNumber, setExerciseNumber] = useState(0)\n    const [timerFinish, setTimerFinish] = useState(false)\n    const [test, setTest] = useState('false')\n    //duration in ms, 100ms = 10sec\n    let heatupArray = [{ name: 'Xpenb', img: Test, duration: 10 }, { name: 'Hands', img: Hands, duration: 150 }]\n\n    useEffect(() => {\n        props.heatup(heatupArray[exerciseNumber].name)\n    }, [exerciseNumber])\n\n    useEffect(() => {\n        if (timerFinish) {\n            nextExercise(heatupArray)\n        }\n    }, [timerFinish])\n\n    async function nextExercise(arrayWithExercises) {\n        if (timerFinish) {\n            if (exerciseNumber < arrayWithExercises.length) {\n                setExerciseNumber(exerciseNumber + 1)\n                setTimerFinish(false)\n                console.log(timerFinish)\n            } else {\n                console.log('false')\n                return false\n            }\n        }\n    }\n\n    return (\n        <>\n            <div className='imgContainer'>\n                <Exercise exercise={heatupArray[exerciseNumber]} />\n            </div>\n            <Timer setTimerFinish={setTimerFinish} duration={heatupArray[exerciseNumber].duration} />\n        </>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        heatup: (exercise) => { dispatch(heatupAC(exercise)) },\n        startTimer: (seconds) => { dispatch(startTimerAC(seconds)) },\n        setExerciseQuantity: (quntity) => { dispatch(setExerciseQuantityAC(quntity)) },\n        decrExerciseQuantity: () => { dispatch(decrExerciseQuantityAC()) }\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(StartAndPauseContainer);\n"]},"metadata":{},"sourceType":"module"}